name: CI

on:
  push:
  workflow_dispatch:

jobs:
  ghr_push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/ipyannotator
          # Change all uppercase to lowercase
          GHCR_IMAGE=$(echo $GHCR_IMAGE | tr '[A-Z]' '[a-z]')
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG%-*}
          fi
          TAGS="${GHCR_IMAGE}:${VERSION}"
          echo ::set-output name=ghcr_image::${GHCR_IMAGE}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=vcs_ref::${GITHUB_SHA::8}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REP_PAT }}
      -  name: Build and push
         uses: docker/build-push-action@v2
         with:
           context: .
           file: ./Dockerfile
#          push: ${{ github.event_name != 'pull_request' }}
           push: true
           tags: ${{ steps.prep.outputs.tags }}
           cache-from: type=local,src=/tmp/.buildx-cache
           cache-to: mode=max,type=local,dest=/tmp/.buildx-cache
      - name: CheckName
        run: echo $tagz
        env:
          tagz: ${{ steps.docker_meta.outputs.tags }}


#
#  test_1:
#    name: "Read Notebooks"
#    runs-on: ubuntu-latest
#    needs: ghr_push
#
#    steps:
#      - name: Log into GCR
#        run: echo "${{ secrets.REP_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Pull image from DockerHub
#        run: docker pull ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup #  todo (AP): fix img-tag
#
#      - name: Run image in container
#        run: docker run --rm ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup /bin/bash -c "poetry run nbdev_read_nbs"
#
#  test_2:
#    name: "Check Notebooks Clean"
#    runs-on: ubuntu-latest
#    needs: ghr_push
#
#    steps:
#      - name: Log into GCR
#        run: echo "${{ secrets.REP_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Pull image from DockerHub
#        run: docker pull ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup
#
#      - name: Run image in container
#        run: docker run --rm ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup /bin/bash -c "./scripts/check_clean_nb.sh"
#
#  test_3:
#    name: "Check Notebooks - Lib Diff"
#    runs-on: ubuntu-latest
#    needs: ghr_push
#
#    steps:
#      - name: Log into GCR
#        run: echo "${{ secrets.REP_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Pull image from DockerHub
#        run: docker pull ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup
#
#      - name: Run image in container
#        run: docker run --rm ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup /bin/bash -c "./scripts/check_lib_diff.sh"
#
#  test_4:
#    name: "Run Notebooks tests"
#    runs-on: ubuntu-latest
#    needs: ghr_push
#
#    steps:
#      - name: Log into GCR
#        run: echo "${{ secrets.REP_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Pull image from DockerHub
#        run: docker pull ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup
#
#      - name: Run image in container
#        run: docker run --rm ghcr.io/alexjoz/ipyannotator/ipyannotator:github-setup /bin/bash -c "./scripts/test_nb.sh"
#
#  release_whl:
#    name: "Upload to pypi"
#    runs-on: ubuntu-latest
#    needs: test_4
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#      - uses: abatilo/actions-poetry@v2.0.0
#        with:
#            poetry-version: 1.0.5
#      - name: Upload
#        run: poetry publish --build -r palaimon -u $POETRY_HTTP_BASIC_PYPI_USERNAME -p $POETRY_HTTP_BASIC_PYPI_PASSWORD
#        env:
#          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.POETRY_HTTP_BASIC_PYPI_USERNAME }}
#          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.POETRY_HTTP_BASIC_PYPI_PASSWORD }}
#          POETRY_REPOSITORIES_PALAIMON_URL: ${{ secrets.POETRY_REPOSITORIES_PALAIMON_URL }}
